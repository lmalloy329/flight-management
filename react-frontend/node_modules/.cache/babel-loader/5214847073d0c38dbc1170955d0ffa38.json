{"ast":null,"code":"import _classCallCheck from\"/Users/lmalloy329/Desktop/Flight Management Project/react-frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/lmalloy329/Desktop/Flight Management Project/react-frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import axios from\"axios\";var AUTH_API_URL=\"http://localhost:8080/api/test/\";var AuthService=/*#__PURE__*/function(){function AuthService(){_classCallCheck(this,AuthService);}_createClass(AuthService,[{key:\"login\",value:// goal:logs in by submitting the username and password to the bvackend, if it receives a token back it knows the user is correct and stores it in local storage so the user is persistently logged in\n// now it logs user in and stores user in session storage, i know this is security risk.\nfunction login(username,password){// axios.post(AUTH_API_URL+\"sign-in\",{username,password}).then(response =>{\n//     console.log(\"hi\")\n//     if(response.data.accessToken){\n//         localStorage.setItem(\"user\", JSON.stringify(response.data))\n//     }\n//     return response.data;\n// })\nreturn axios.get(AUTH_API_URL+\"customers\").then(function(response){var user=response.data.filter(function(data){return data.username.toLowerCase()===username.toLowerCase();});if(user[0]&&user[0].password===password){return user[0];}});}//on logout it removes the user from session storage\n},{key:\"logout\",value:function logout(){sessionStorage.removeItem(\"user\");}//submits customer data to sign up to register user\n},{key:\"signup\",value:function signup(customer){return axios.post(\"http://localhost:8080/api/auth/signup\",customer);}//gets the user info for thhe user currently logged in.\n},{key:\"getCurrentUser\",value:function getCurrentUser(){return JSON.parse(localStorage.getItem(\"user\"));}}]);return AuthService;}();export default new AuthService();","map":{"version":3,"sources":["/Users/lmalloy329/Desktop/Flight Management Project/react-frontend/src/services/AuthService.js"],"names":["axios","AUTH_API_URL","AuthService","username","password","get","then","response","user","data","filter","toLowerCase","sessionStorage","removeItem","customer","post","JSON","parse","localStorage","getItem"],"mappings":"8SAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,GAAMC,CAAAA,YAAY,CAAG,iCAArB,C,GAEMC,CAAAA,W,gIACJ;AACA;AACA,eAAMC,QAAN,CAAgBC,QAAhB,CAA0B,CACxB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,MAAOJ,CAAAA,KAAK,CAACK,GAAN,CAAUJ,YAAY,CAAG,WAAzB,EAAsCK,IAAtC,CAA2C,SAACC,QAAD,CAAc,CAC9D,GAAIC,CAAAA,IAAI,CAAGD,QAAQ,CAACE,IAAT,CAAcC,MAAd,CACT,SAACD,IAAD,QAAUA,CAAAA,IAAI,CAACN,QAAL,CAAcQ,WAAd,KAAgCR,QAAQ,CAACQ,WAAT,EAA1C,EADS,CAAX,CAGA,GAAIH,IAAI,CAAC,CAAD,CAAJ,EAAWA,IAAI,CAAC,CAAD,CAAJ,CAAQJ,QAAR,GAAqBA,QAApC,CAA8C,CAC5C,MAAOI,CAAAA,IAAI,CAAC,CAAD,CAAX,CACD,CACF,CAPM,CAAP,CAQD,CACD;sBACA,iBAAS,CACPI,cAAc,CAACC,UAAf,CAA0B,MAA1B,EACD,CACD;sBACA,gBAAOC,QAAP,CAAiB,CACf,MAAOd,CAAAA,KAAK,CAACe,IAAN,CAAW,uCAAX,CAAoDD,QAApD,CAAP,CACD,CACD;8BACA,yBAAiB,CACf,MAAOE,CAAAA,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP,CACD,C,2BAGH,cAAe,IAAIjB,CAAAA,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nconst AUTH_API_URL = \"http://localhost:8080/api/test/\";\n\nclass AuthService {\n  // goal:logs in by submitting the username and password to the bvackend, if it receives a token back it knows the user is correct and stores it in local storage so the user is persistently logged in\n  // now it logs user in and stores user in session storage, i know this is security risk.\n  login(username, password) {\n    // axios.post(AUTH_API_URL+\"sign-in\",{username,password}).then(response =>{\n    //     console.log(\"hi\")\n\n    //     if(response.data.accessToken){\n    //         localStorage.setItem(\"user\", JSON.stringify(response.data))\n    //     }\n    //     return response.data;\n    // })\n    return axios.get(AUTH_API_URL + \"customers\").then((response) => {\n      let user = response.data.filter(\n        (data) => data.username.toLowerCase() === username.toLowerCase()\n      );\n      if (user[0] && user[0].password === password) {\n        return user[0];\n      }\n    });\n  }\n  //on logout it removes the user from session storage\n  logout() {\n    sessionStorage.removeItem(\"user\");\n  }\n  //submits customer data to sign up to register user\n  signup(customer) {\n    return axios.post(\"http://localhost:8080/api/auth/signup\", customer);\n  }\n  //gets the user info for thhe user currently logged in.\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}