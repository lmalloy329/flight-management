{"ast":null,"code":"import axios from \"axios\";\nconst AUTH_API_URL = \"http://localhost:8080/api/test/\";\n\nclass AuthService {\n  //logs in by submitting the username and password to the bvackend, if it receives a token back it knows the user is correct and stores it in local storage so the user is persistently logged in\n  login(username, password) {\n    // axios.post(AUTH_API_URL+\"sign-in\",{username,password}).then(response =>{\n    //     console.log(\"hi\")\n    //     if(response.data.accessToken){\n    //         localStorage.setItem(\"user\", JSON.stringify(response.data))\n    //     }\n    //     return response.data;\n    // })\n    return axios.get(AUTH_API_URL + \"customers\").then(response => {\n      let user = response.data.filter(data => data.username.toLowerCase() === username.toLowerCase());\n\n      if (user[0] && user[0].password === password) {\n        // sessionStorage.setItem(\"user\", JSON.stringify(user));\n        return user[0];\n      } // return user;\n\n    });\n  } //on logout it removes the user from local storage\n\n\n  logout() {\n    sessionStorage.removeItem(\"user\");\n  } //submits customer data to sign up to register user\n\n\n  signup(customer) {\n    return axios.post(\"http://localhost:8080/api/auth/signup\", customer);\n  } //gets the user info for thhe user currently logged in.\n\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n\n}\n\nexport default new AuthService();","map":{"version":3,"sources":["/Users/lmalloy329/Desktop/Flight Management Project/react-frontend/src/services/AuthService.js"],"names":["axios","AUTH_API_URL","AuthService","login","username","password","get","then","response","user","data","filter","toLowerCase","logout","sessionStorage","removeItem","signup","customer","post","getCurrentUser","JSON","parse","localStorage","getItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,MAAMC,YAAY,GAAG,iCAArB;;AAEA,MAAMC,WAAN,CAAkB;AAChB;AACAC,EAAAA,KAAK,CAACC,QAAD,EAAWC,QAAX,EAAqB;AACxB;AACA;AAEA;AACA;AACA;AACA;AACA;AACA,WAAOL,KAAK,CAACM,GAAN,CAAUL,YAAY,GAAG,WAAzB,EAAsCM,IAAtC,CAA4CC,QAAD,IAAc;AAC9D,UAAIC,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcC,MAAd,CACRD,IAAD,IAAUA,IAAI,CAACN,QAAL,CAAcQ,WAAd,OAAgCR,QAAQ,CAACQ,WAAT,EADjC,CAAX;;AAGA,UAAIH,IAAI,CAAC,CAAD,CAAJ,IAAWA,IAAI,CAAC,CAAD,CAAJ,CAAQJ,QAAR,KAAqBA,QAApC,EAA8C;AAC5C;AACA,eAAOI,IAAI,CAAC,CAAD,CAAX;AACD,OAP6D,CAQ9D;;AACD,KATM,CAAP;AAUD,GArBe,CAsBhB;;;AACAI,EAAAA,MAAM,GAAG;AACPC,IAAAA,cAAc,CAACC,UAAf,CAA0B,MAA1B;AACD,GAzBe,CA0BhB;;;AACAC,EAAAA,MAAM,CAACC,QAAD,EAAW;AACf,WAAOjB,KAAK,CAACkB,IAAN,CAAW,uCAAX,EAAoDD,QAApD,CAAP;AACD,GA7Be,CA8BhB;;;AACAE,EAAAA,cAAc,GAAG;AACf,WAAOC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAAP;AACD;;AAjCe;;AAoClB,eAAe,IAAIrB,WAAJ,EAAf","sourcesContent":["import axios from \"axios\";\n\nconst AUTH_API_URL = \"http://localhost:8080/api/test/\";\n\nclass AuthService {\n  //logs in by submitting the username and password to the bvackend, if it receives a token back it knows the user is correct and stores it in local storage so the user is persistently logged in\n  login(username, password) {\n    // axios.post(AUTH_API_URL+\"sign-in\",{username,password}).then(response =>{\n    //     console.log(\"hi\")\n\n    //     if(response.data.accessToken){\n    //         localStorage.setItem(\"user\", JSON.stringify(response.data))\n    //     }\n    //     return response.data;\n    // })\n    return axios.get(AUTH_API_URL + \"customers\").then((response) => {\n      let user = response.data.filter(\n        (data) => data.username.toLowerCase() === username.toLowerCase()\n      );\n      if (user[0] && user[0].password === password) {\n        // sessionStorage.setItem(\"user\", JSON.stringify(user));\n        return user[0];\n      }\n      // return user;\n    });\n  }\n  //on logout it removes the user from local storage\n  logout() {\n    sessionStorage.removeItem(\"user\");\n  }\n  //submits customer data to sign up to register user\n  signup(customer) {\n    return axios.post(\"http://localhost:8080/api/auth/signup\", customer);\n  }\n  //gets the user info for thhe user currently logged in.\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n}\n\nexport default new AuthService();\n"]},"metadata":{},"sourceType":"module"}